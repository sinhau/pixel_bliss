# Timezone for date/time operations and category rotation scheduling
timezone: "America/Los_Angeles"

# Categories removed - now using pure knobs-based generation for maximum diversity

prompt_generation:
  provider: "openai"        # Prompt generation provider: "openai" for GPT models, "dummy" for testing
  model: "gpt-5"            # AI model for generating base prompts, variants, and alt text
  num_prompt_variants: 1    # Number of prompt variations to generate from each base prompt (1 base -> 5 variants)
  async_enabled: true       # Enable parallel processing of prompt generation (faster generation)
  max_concurrency: 10     # Optional limit on concurrent API requests (null = no limit, use integer to limit)
  use_knobs: true           # Use new diverse knobs system instead of legacy categories/art_styles
  variant_strategy: "single"  # "single" = vary one knob (maintains identity), "multiple" = vary all knobs (more diversity)
  # System/style rules enforced at runtime: no real people/logos/NSFW content, includes negative prompts, aesthetic style hints

image_generation:
  provider_order: ["fal", "replicate"]  # Order to try image generation providers - FAL first, then Replicate as fallback
  model_fal: ["fal-ai/gemini-25-flash-image", "fal-ai/bytedance/seedream/v3/text-to-image", "fal-ai/imagen4/preview/ultra"]     # FAL AI models to use for image generation
  model_replicate: ["google/gemini-2.5-flash-image", "bytedance/seedream-3", "google/imagen-4-ultra"]   # Replicate models as fallback options
  retries_per_image: 2      # Number of retry attempts per image generation request before giving up
  async_enabled: true       # Enable parallel processing of prompt variants (faster generation)
  max_concurrency: 10     # Optional limit on concurrent API requests (null = no limit, use integer to limit)

ranking:
  # Image scoring weights for final ranking: final_score = w_brightness * brightness_norm + w_entropy * entropy_norm + w_aesthetic * aesthetic_score + w_local_quality * local_quality_score
  w_brightness: 0.1        # Weight for normalized brightness score (0-1)
  w_entropy: 0.15           # Weight for normalized entropy/complexity score (0-1) 
  w_aesthetic: 0.50         # Weight for aesthetic quality score (0-1)
  w_local_quality: 0.25     # Weight for local quality score (0-1) - sharpness and exposure

  # Quality thresholds - images failing these are discarded before ranking
  entropy_min: 3.5          # Minimum entropy (visual complexity) - filters out overly simple/flat images
  brightness_min: 10        # Minimum average brightness (0-255) - filters out too-dark images
  brightness_max: 245       # Maximum average brightness (0-255) - filters out overexposed images

  # Duplicate detection using perceptual hashing
  phash_distance_min: 6     # Minimum Hamming distance between perceptual hashes to avoid near-duplicates

aesthetic_scoring:
  provider: "replicate"     # Provider for aesthetic quality scoring
  model: "methexis-inc/img2aestheticscore:ec5029694b29e51fa9e5b794d73ba8103569d5d3ef3d60b7a8fdef18b9997b90"  # Aesthetic scoring model endpoint
  score_min: 1.0            # Minimum expected aesthetic score from the model (for normalization)
  score_max: 10.0           # Maximum expected aesthetic score from the model (for normalization)

local_quality:
  resize_long: 768          # Resize images to this long side for quality assessment (faster processing)
  min_side: 512             # Minimum dimension for either width or height (hard floor)
  ar_min: 0.5               # Minimum aspect ratio (width/height) - reject ultra-tall images
  ar_max: 2.0               # Maximum aspect ratio (width/height) - reject ultra-wide images
  sharpness_min: 120.0      # Minimum Variance of Laplacian for sharpness (hard floor)
  sharpness_good: 600.0     # VoL value considered "good" sharpness (score = 1.0)
  clip_max: 0.20            # Maximum allowed clipping fraction (shadows + highlights, hard floor)

upscale:
  enabled: true             # Whether to upscale winning images before creating wallpaper variants
  provider: "fal"           # Upscaling provider: "fal", "replicate", or "dummy_local" for testing
  model: "fal-ai/esrgan"    # Specific upscaling model to use (e.g., Real-ESRGAN variants)
  factor: 4                 # Upscaling factor (2x, 4x, etc.)

# Output wallpaper variants - edit this list to change sizes without code changes
# Each variant specifies: name (for file naming), width, and height in pixels
wallpaper_variants:
  - {name: "square_1x1_2k",        w: 2048, h: 2048}    # Square format for social media, avatars
  - {name: "phone_9x16_2k",        w: 1125, h: 2000}    # Portrait phone wallpaper (iPhone-style)
  - {name: "phone_20x9_3.2k",      w: 1440, h: 3200}    # Tall phone wallpaper (Android ultra-wide)
  - {name: "desktop_16x9_1080p",   w: 1920, h: 1080}    # Standard desktop 1080p
  - {name: "desktop_16x9_1440p",   w: 2560, h: 1440}    # Desktop 1440p (2K)
  - {name: "desktop_16x9_4k",      w: 3840, h: 2160}    # Desktop 4K resolution
  - {name: "desktop_16x10_1600p",  w: 2560, h: 1600}    # Desktop 16:10 aspect ratio
  - {name: "ultrawide_21x9",       w: 3440, h: 1440}    # Ultrawide monitor format

alerts:
  enabled: false             # Whether to send webhook notifications for successes/failures
  webhook_url_env: "ALERT_WEBHOOK_URL"  # Environment variable name containing the webhook URL (e.g., Discord, Slack)

discord:
  enabled: true             # Whether to enable human-in-the-loop selection via Discord DMs
  bot_token_env: "DISCORD_BOT_TOKEN"    # Environment variable name containing the Discord bot token
  user_id_env: "DISCORD_USER_ID"        # Environment variable name containing your Discord user ID
  timeout_sec: 1800           # How long to wait for your selection (30 minutes)
  batch_size: 10             # Number of images per batch message (Discord limit is 10 attachments)

twitter_compression:
  enabled: true             # Whether to enable automatic compression for Twitter uploads
  max_size_mb: 5.0          # Maximum file size in MB (Twitter's limit is 5MB)
  quality_levels: [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]  # JPEG quality levels to try progressively
  min_quality: 50           # Minimum JPEG quality to use as fallback
  max_dimension: 4096       # Maximum image dimension before resizing
  preserve_png: true        # Try to keep PNG format if possible (lossless)
